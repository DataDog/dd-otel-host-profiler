name: Common build

on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
        description: "Go version to use for the build"
      profiler-version:
        required: true
        type: string
        description: "Profiler version to use for the build"

permissions:
  contents: read
        
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-24.04
    steps:
    - name: Check out
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
    - name: Get linter version
      id: linter-version
      run: (echo -n "version="; make linter-version) >> "$GITHUB_OUTPUT"
    - name: golangci-lint
      uses: reviewdog/action-golangci-lint@7708105983c614f7a2725e2172908b7709d1c3e4 # v2.6.2
      with:
        go_version: ${{ inputs.go-version }}
        golangci_lint_version: ${{ steps.linter-version.outputs.version }}
        fail_on_error: true
        reporter: github-pr-review
    - name: Verify copyright headers
      run: |
        go run tools/checkcopyright.go
    - name: vet
      run: go vet ./...
    - name: Run 'go mod tidy'
      run: find . -iname go.mod -execdir go mod tidy \;
    - name: Refresh LICENSE-3rdparty.csv
      run: make licenses
      env:
        TMPDIR: ${{ runner.temp }}
    - name: Check if working tree is dirty
      id: is-tree-dirty
      run: |-
        set -euxo pipefail
        git add .
        git status
        git diff --staged --patch --exit-code > .repo.patch || echo 'result=true' >> "${GITHUB_OUTPUT}"
    - name: Fail build if working tree is dirty
      if: steps.is-tree-dirty.outputs.result == 'true'
      run: |-
        echo "::error::Files have been modified by 'go mod tidy' or 'make licenses' (see logs)."
        cat .repo.patch
        exit 1

  test:
    name: Test
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        os: ["arm-4core-linux-ubuntu24.04", "ubuntu-24.04"]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
    - name: Set up Go ${{ inputs.go-version }}
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: ${{ inputs.go-version }}
        check-latest: true
    - name: Install gotestsum
      shell: bash
      run: |
        go install gotest.tools/gotestsum@latest          
    - name: Tests
      run: |
        gotestsum --junitfile gotestsum-report.xml -- ./... -v -race -coverprofile=coverage.txt -covermode=atomic

  build:
    name: Build
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        os: ["arm-4core-linux-ubuntu24.04", "ubuntu-24.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Set up Go ${{ inputs.go-version }}
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ inputs.go-version }}
          check-latest: true
      - name: Build
        run: |
          make VERSION=${{ inputs.profiler-version }}
      - name: Upload artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: agent-${{ matrix.os == 'arm-4core-linux-ubuntu24.04' && 'aarch64' || 'x86_64' }}
          path: dd-otel-host-profiler
